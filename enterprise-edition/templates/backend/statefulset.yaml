{{- if .Values.backend.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "name" . }}-backend
  labels:
    app: {{ template "name" . }}-backend
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
  {{- with .Values.backend.annotations }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
    {{/* This forces a restart if the configmap has changed */}}
    {{- if .Values.backend.env }}
    configchecksum: {{ include (print .Template.BasePath "/backend/configmap-env.yaml") . | sha256sum | trunc 63 }}
    {{- end }}
spec:
  replicas: {{ .Values.backend.replicas }}
  serviceName: {{ template "name" . }}-backend-headless
  selector:
    matchLabels:
      app: {{ template "name" . }}-backend
  podManagementPolicy: {{ .Values.backend.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.backend.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}-backend
    spec:
    {{- if .Values.backend.affinity }}
      affinity:
      {{- toYaml .Values.backend.affinity | nindent 8 }}
    {{- end }}
    {{- if .Values.backend.schedulerName }}
      schedulerName: "{{ .Values.backend.schedulerName }}"
    {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.imagePullSecrets | nindent 8 }}
    {{- end }}
    {{- if .Values.backend.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.backend.nodeSelector | nindent 8 }}
    {{- end }}
    {{- if .Values.backend.securityContext }}
      securityContext:
      {{- toYaml .Values.backend.securityContext | nindent 8 }}
    {{- end }}
    {{- if .Values.backend.tolerations }}
      tolerations:
      {{- toYaml .Values.backend.tolerations | nindent 8 }}
    {{- end }}
    {{- if .Values.backend.affinity }}
      affinity:
      {{- toYaml .Values.backend.affinity | nindent 8 }}
    {{- end }}
      volumes:
      {{- if .Values.backend.volumes }}
      {{- toYaml .Values.backend.volumes | nindent 6 }}
      {{- end }}
      {{- if .Values.backend.licenseFile }}
      - name: license-l4j
        configMap:
          name: "{{ template "name" . }}-backend-license"
      {{- end }}
      {{- if .Values.backend.applicationYml }}
      - name: application-yml
        configMap:
          name: "{{ template "name" . }}-backend-application"
      {{- end }}
      {{- range .Values.backend.secretMounts }}
      - name: {{ .name }}
        secret:
          secretName: {{ .secretName }}
      {{- end }}
      {{- if .Values.backend.initContainers }}
      initContainers:
      {{- toYaml .Values.backend.initContainers | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ template "name" . }}-backend
        image: "{{ .Values.registry }}/{{ .Values.backend.image }}:{{ .Values.version }}"
        imagePullPolicy: {{ quote .Values.imagePullPolicy }}
        envFrom:
        - configMapRef:
            name: {{ template "name" . }}-backend-env
        volumeMounts:
        {{- if .Values.backend.volumeMounts }}
        {{- toYaml .Values.backend.volumeMounts . | nindent 8 }}
        {{- end }}
        {{- range .Values.backend.secretMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          subPath: {{ .subPath }}
          readOnly: {{ .readOnly }}
        {{- end }}
        - name: octoperf-data
          mountPath: "{{ .Values.backend.persistentVolume.mountPath }}"
          subPath: "{{ .Values.backend.persistentVolume.subPath }}"
        {{- if .Values.backend.licenseFile }}
        - name: license-l4j
          mountPath: "/home/octoperf/license/license.l4j"
          subPath: "license.l4j"
        {{- end }}
        {{- if .Values.backend.applicationYml }}
        - name: application-yml
          mountPath: "/home/octoperf/config/application.yml"
          subPath: "application.yml"
        {{- end }}
        ports:
        - name: http-port
          containerPort: {{ .Values.backend.port }}
        readinessProbe:
        {{- toYaml .Values.backend.readinessProbe | nindent 10 }}
        livenessProbe:
        {{- toYaml .Values.backend.livenessProbe | nindent 10 }}
        resources:
        {{- toYaml .Values.backend.resources | nindent 10 }}
        
{{- if .Values.backend.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: octoperf-data
        {{- if .Values.backend.persistentVolume.annotations }}
        annotations:
        {{- toYaml .Values.backend.persistentVolume.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- toYaml .Values.backend.persistentVolume.accessModes | nindent 10 }}
        resources:
          requests:
            storage: "{{ .Values.backend.persistentVolume.size }}"
      {{- if .Values.backend.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.backend.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.backend.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
        - name: octoperf-data
          emptyDir: {}
{{- end }}
{{- end }}
