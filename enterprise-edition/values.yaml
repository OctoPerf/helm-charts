---

registry: "registry.hub.docker.com"
version: "13.0.0"

imagePullPolicy: Always
imagePullSecrets: []
# - name: "image-pull-secret"

elasticsearch:
  enabled: true
  replicas: 1
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

ingress:
  enabled: true
  
  # className: myClassName

  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts: []
    # Possibly define host in /etc/hosts
    # - enterprise-edition.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


backend:
  image: octoperf/enterprise-edition
  replicas: 1
  port: 8090

  annotations: {}

  initContainers: {}

  affinity: {}
  #  podAntiAffinity:
  #  requiredDuringSchedulingIgnoredDuringExecution:
  #  - labelSelector:
  #      matchExpressions:
  #      - key: app
  #        operator: In
  #        values:
  #        - {{ template "name" . }}-backend
  #    topologyKey: "kubernetes.io/hostname"

  tolerations: {}

  env:
    JAVA_OPTS: "-Xms1g -Xmx1g"

  # License file content  
  # licenseFile: |-

  # config/application.yml
  applicationYml: |-
    server:
      public:
        port: 80
    elasticsearch:
      hostname: elasticsearch-master-headless
 
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 5
    httpGet:
      path: /actuator/health/readiness
      port: http-port
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    httpGet:
      path: /actuator/health
      port: http-port

  # scheduler name
  # schedulerName: ""

  ## priorityClassName
  ##
  priorityClassName: ""

  ## Additional backend Secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  secretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   subPath: ""
    #   secretName: backend-secret-files
    #   readOnly: true

  ## Node labels for backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  # The default is to deploy all pods serially. By setting this to parallel all pods are started at
  # the same time when bootstrapping the cluster
  podManagementPolicy: Parallel

  updateStrategy: RollingUpdate

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  # Custom backend volumes
  volumes: {}
  volumeMounts: {}

  persistentVolume:
    ## If true, backend will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## backend data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## backend data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## backend data Persistent Volume mount root path
    ##
    mountPath: /home/octoperf/data

    ## backend data Persistent Volume size
    ##
    size: 1Gi

    ## backend data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClassName: ""

    ## Subdirectory of backend data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ""

  ## backend resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 256Mi

  ## Security context to be added to backend pods
  ##
  securityContext: {}
  #  fsGroup: 9001
  #  runAsGroup: 9001
  #  runAsNonRoot: true
  #  runAsUser: 9001

  headless:
    annotations: {}
    labels: {}
    publishNotReadyAddresses: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the backend service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    # nodePort: 30000

doc:
  enabled: true

  # nginx internal port
  port: 8080
  replicas: 1
  image: octoperf/enterprise-documentation

  annotations: {}

  readinessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5

  ## Node labels for backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Pod affinity
  ##
  affinity: {}

frontend:
  enabled: true
  replicas: 1
  image: octoperf/octoperf-ui

  annotations: {}

  # nginx internal port
  port: 8080

  readinessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5

  config:
    config-prod.json: |-
      {
        "version": "octoperf-13",
        "backendApiUrl": "",
        "docUrl": "/doc",
        "oldUiUrl": "/app",
        "adminEmail": "support@octoperf.com",
        "login": {
          "@type": "form",
          "register": true,
          "activate": false,
          "forgotPassword": false
        },
        "twitter": false,
        "cloud": false
      }

  ## Node labels for backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Pod affinity
  ##
  affinity: {}


frontendLegacy:
  enabled: false
  replicas: 1
  image: octoperf/enterprise-ui

  annotations: {}

  # nginx internal port
  port: 8080

  readinessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /
      port: http-port
    initialDelaySeconds: 5
    periodSeconds: 5

  config:
    config-ee.json: |-
      {
        "baseUrl": "",
        "docUrl": "/doc",
        "adminEmail": "support@octoperf.com",
        "modules": {
          "login": true,
          "register": true
        }
      }
   
  ## Node labels for backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Pod affinity
  ##
  affinity: {}